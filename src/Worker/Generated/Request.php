<?php
namespace Fusio\Impl\Worker\Generated;

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class Request
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'arguments',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
        2 => array(
            'var' => 'payload',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'context',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Fusio\Impl\Worker\Generated\RequestContext',
        ),
    );

    /**
     * @var array
     */
    public $arguments = null;
    /**
     * @var string
     */
    public $payload = null;
    /**
     * @var \Fusio\Impl\Worker\Generated\RequestContext
     */
    public $context = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['arguments'])) {
                $this->arguments = $vals['arguments'];
            }
            if (isset($vals['payload'])) {
                $this->payload = $vals['payload'];
            }
            if (isset($vals['context'])) {
                $this->context = $vals['context'];
            }
        }
    }

    public function getName()
    {
        return 'Request';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::MAP) {
                        $this->arguments = array();
                        $_size9 = 0;
                        $_ktype10 = 0;
                        $_vtype11 = 0;
                        $xfer += $input->readMapBegin($_ktype10, $_vtype11, $_size9);
                        for ($_i13 = 0; $_i13 < $_size9; ++$_i13) {
                            $key14 = '';
                            $val15 = '';
                            $xfer += $input->readString($key14);
                            $xfer += $input->readString($val15);
                            $this->arguments[$key14] = $val15;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->payload);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRUCT) {
                        $this->context = new \Fusio\Impl\Worker\Generated\RequestContext();
                        $xfer += $this->context->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Request');
        if ($this->arguments !== null) {
            if (!is_array($this->arguments)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('arguments', TType::MAP, 1);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->arguments));
            foreach ($this->arguments as $kiter16 => $viter17) {
                $xfer += $output->writeString($kiter16);
                $xfer += $output->writeString($viter17);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->payload !== null) {
            $xfer += $output->writeFieldBegin('payload', TType::STRING, 2);
            $xfer += $output->writeString($this->payload);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->context !== null) {
            if (!is_object($this->context)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('context', TType::STRUCT, 3);
            $xfer += $this->context->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
